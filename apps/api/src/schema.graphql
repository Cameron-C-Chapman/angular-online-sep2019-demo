type ApiResponse {
  message: String!
}

enum UserRole {
  USER
  ADMIN
}

type Comment {
  id: Int!
  userId: Int!
  comment: String!
}

type User {
  id: Int!
  email: String!
  name: String!
  role: UserRole!
  age: Int!
  profilePicUrl: String
  comments: [Comment]
}

input UserInput {
  id: Int
  email: String!
  name: String!
  role: UserRole!
  age: Int!
  profilePicUrl: String
}

input CommentInput {
  id: Int
  userId: Int!
  comment: String!
}

type Query {
  users: [User]
  user(id: Int!): User
}

type Mutation {
  createUser(user: UserInput!): User
  updateUser(user: UserInput!): ApiResponse!
  deleteUser(id: Int!): ApiResponse!
  addComment(comment: CommentInput!): Comment
  removeComment(id: Int!): ApiResponse!
}

type Subscription {
  commentAdded(userId: Int!): Comment
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
